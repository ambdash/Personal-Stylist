from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from ..keyboards import main_menu, style_menu
from ..states import BotStates
from ..services.neo4j_service import get_style_recommendations
from ..services.inference_service import generate_recommendation
from ..services.metrics_service import track_request
from celery.result import AsyncResult
import logging

router = Router()
logger = logging.getLogger(__name__)

@router.message(Command("start"))
async def start_command(message: Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI-—Å—Ç–∏–ª–∏—Å—Ç. –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ:\n"
        "1. –ü–æ–¥–æ–±—Ä–∞—Ç—å –æ–±—Ä–∞–∑\n"
        "2. –î–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å—Ç–∏–ª—é\n"
        "3. –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –º–æ–¥–µ\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu()
    )

@router.message(Command("help"))
async def help_command(message: Message):
    await message.answer(
        "ü§ñ –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n"
        "üì± –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/style - –ü–æ–¥–æ–±—Ä–∞—Ç—å —Å—Ç–∏–ª—å\n"
        "/recommend - –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
        "/history - –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤\n\n"
        "üí° –¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "- –ù–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å\n"
        "- –í—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é\n"
        "- –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"
    )

@router.message(Command("style"))
async def style_command(message: Message, state: FSMContext):
    await state.set_state(BotStates.waiting_for_style)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å, –∫–æ—Ç–æ—Ä—ã–π –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:",
        reply_markup=style_menu()
    )

@router.callback_query(F.data.startswith("style_"))
async def process_style_selection(callback: CallbackQuery, state: FSMContext):
    style = callback.data.split("_")[1]
    await state.update_data(selected_style=style)
    
    # Get recommendations from Neo4j
    recommendations = await get_style_recommendations(style)
    
    # Track request in Prometheus
    track_request("style_recommendation", style)
    
    # Format recommendations
    response = f"üé® –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Å—Ç–∏–ª—è {style}:\n\n"
    for rec in recommendations:
        response += f"‚Ä¢ {rec}\n"
    
    await callback.message.answer(response)
    await callback.answer()

@router.message(Command("recommend"))
async def recommend_command(message: Message, state: FSMContext):
    await state.set_state(BotStates.waiting_for_prompt)
    await message.answer(
        "–û–ø–∏—à–∏—Ç–µ, –¥–ª—è –∫–∞–∫–æ–≥–æ —Å–ª—É—á–∞—è –≤–∞–º –Ω—É–∂–Ω—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: '–ù—É–∂–µ–Ω –æ–±—Ä–∞–∑ –¥–ª—è —Å–≤–∏–¥–∞–Ω–∏—è –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ'"
    )

@router.message(BotStates.waiting_for_prompt)
async def process_prompt(message: Message, state: FSMContext):
    # Add task to Celery queue
    task = generate_recommendation.delay(message.text)
    
    # Store task ID in state
    await state.update_data(task_id=task.id)
    await message.answer("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏...")
    
    # Wait for result
    result = AsyncResult(task.id)
    try:
        recommendation = await result.get(timeout=30)
        await message.answer(recommendation)
    except Exception as e:
        logger.error(f"Error generating recommendation: {e}")
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    await state.clear()

@router.message()
async def handle_message(message: Message):
    """Handle all other messages"""
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å–æ –º–Ω–æ–π.\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
    ) 