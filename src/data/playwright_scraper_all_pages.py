
import asyncio
from playwright.async_api import async_playwright
import json
import os

OUTPUT_DIR = "elyts_articles_html"
os.makedirs(OUTPUT_DIR, exist_ok=True)

BASE_URL = "https://elyts.ru"
START_URL = "https://elyts.ru/blog/s/modnye-sovety/"
PAGE_URL_TEMPLATE = "https://elyts.ru/blog/s/modnye-sovety/?PAGEN_1={}"

async def fetch_article_links(page):
    all_links = set()
    MAX_PAGES = 20
    page_number = 1

    while page_number <= MAX_PAGES:
        page_url = START_URL if page_number == 1 else PAGE_URL_TEMPLATE.format(page_number)
        print(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {page_url}")
        await page.goto(page_url)
        await page.wait_for_load_state("domcontentloaded")

        links = await page.eval_on_selector_all(
            "div.product-item-container a[href^='/blog/']",
            "elements => elements.map(el => el.href)"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
        initial_count = len(all_links)
        all_links.update(links)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –Ω–µ –ø—Ä–∏–±–∞–≤–∏–ª–æ—Å—å ‚Äî –≤—ã—Ö–æ–¥–∏–º
        if len(all_links) == initial_count:
            print("‚õî –ë–æ–ª—å—à–µ –Ω–æ–≤—ã—Ö —Å—Å—ã–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –û—Å—Ç–∞–Ω–æ–≤–∫–∞.")
            break

        page_number += 1

    return sorted(all_links)

async def save_article(page, url, index):
    await page.goto(url)
    await page.wait_for_load_state("domcontentloaded")
    html = await page.content()

    filename = os.path.join(OUTPUT_DIR, f"article_{index:03}.html")
    with open(filename, "w", encoding="utf-8") as f:
        f.write(html)
    print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filename}")
    return {"id": index, "url": url, "file": filename}

async def main():
    async with async_playwright() as p:
        browser = await p.chromium.launch(headless=True)
        page = await browser.new_page()

        print("üîç –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–µ–π —Å–æ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü...")
        links = await fetch_article_links(page)
        print(f"üîó –ù–∞–π–¥–µ–Ω–æ {len(links)} —Å—Ç–∞—Ç–µ–π.")

        log = []
        for i, link in enumerate(links, start=1):
            try:
                result = await save_article(page, link, i)
                log.append(result)
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {link}: {e}")

        await browser.close()

        with open("elyts_articles_log.json", "w", encoding="utf-8") as f:
            json.dump(log, f, ensure_ascii=False, indent=2)
        print("üìÅ –õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: elyts_articles_log.json")

if __name__ == "__main__":
    asyncio.run(main())
