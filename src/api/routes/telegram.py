from fastapi import APIRouter, HTTPException, Request
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from src.ml.inference.engine import InferenceEngine
from src.api.services.kafka_producer import KafkaMessageProducer
import os
import json
import logging

router = APIRouter(prefix="/v1/telegram", tags=["telegram"])
logger = logging.getLogger(__name__)

bot = Bot(token=os.getenv("TELEGRAM_BOT_TOKEN"))
dp = Dispatcher()
inference_engine = InferenceEngine()
kafka_producer = KafkaMessageProducer()

@dp.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª–∏—Å—Ç. –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ:\n"
        "1. –ü–æ–¥–æ–±—Ä–∞—Ç—å –æ–±—Ä–∞–∑\n"
        "2. –î–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å—Ç–∏–ª—é\n"
        "3. –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –º–æ–¥–µ\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫."
    )

@dp.message(Command("help"))
async def help_command(message: types.Message):
    await message.answer(
        "ü§ñ –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n"
        "/style - –ü–æ–¥–æ–±—Ä–∞—Ç—å –æ–±—Ä–∞–∑\n"
        "/recommend - –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
        "/trends - –£–∑–Ω–∞—Ç—å –æ —Ç—Ä–µ–Ω–¥–∞—Ö\n"
        "\n–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å!"
    )

@dp.message()
async def handle_message(message: types.Message):
    ## STUB ADD KAFKA (OR MAYBE REDIS)
    try:
        # Log user message to Kafka
        await kafka_producer.send_message(
            "user_messages",
            {
                "user_id": message.from_user.id,
                "message": message.text,
                "timestamp": message.date.isoformat()
            }
        )

        response, _ = inference_engine.generate(message.text)

        await kafka_producer.send_message(
            "bot_responses",
            {
                "user_id": message.from_user.id,
                "message": response,
                "timestamp": message.date.isoformat()
            }
        )

        await message.answer(response)

    except Exception as e:
        logger.error(f"Error processing message: {e}")
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.post("/webhook")
async def telegram_webhook(request: Request):
    """Handle Telegram webhook requests"""
    try:
        data = await request.json()
        update = types.Update(**data)
        await dp.feed_update(bot=bot, update=update)
        return {"status": "ok"}
    except Exception as e:
        logger.error(f"Webhook error: {e}")
        raise HTTPException(status_code=500, detail=str(e)) 